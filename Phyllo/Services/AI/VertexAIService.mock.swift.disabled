import Foundation
import UIKit

// MARK: - Mock Vertex AI Service (No Firebase Dependencies)
// Mock implementation for development/testing without Firebase

// MARK: - Mock Vertex AI Service

@MainActor
class VertexAIService: ObservableObject {
    static let shared = VertexAIService()
    
    @Published var isAnalyzing = false
    @Published var analysisProgress: Double = 0.0
    
    private init() {}
    
    // MARK: - Public Methods
    
    func analyzeMeal(_ request: MealAnalysisRequest) async throws -> MealAnalysisResult {
        isAnalyzing = true
        analysisProgress = 0.0
        
        defer {
            isAnalyzing = false
            analysisProgress = 1.0
        }
        
        // Simulate analysis progress
        for i in 1...10 {
            try await Task.sleep(nanoseconds: 100_000_000) // 0.1 seconds
            analysisProgress = Double(i) / 10.0
        }
        
        // Return mock data
        return MealAnalysisResult(
            mealName: "Grilled Chicken Salad",
            confidence: 0.92,
            ingredients: [
                .init(name: "Grilled Chicken Breast", amount: "150", unit: "g", foodGroup: "Protein"),
                .init(name: "Mixed Greens", amount: "2", unit: "cups", foodGroup: "Vegetables"),
                .init(name: "Cherry Tomatoes", amount: "8", unit: "pieces", foodGroup: "Vegetables"),
                .init(name: "Olive Oil Dressing", amount: "2", unit: "tbsp", foodGroup: "Fats")
            ],
            nutrition: .init(
                calories: 420,
                protein: 35.5,
                carbs: 12.3,
                fat: 24.8
            ),
            micronutrients: [
                .init(name: "Vitamin A", amount: 2500, unit: "IU", percentRDA: 50),
                .init(name: "Vitamin C", amount: 45, unit: "mg", percentRDA: 75),
                .init(name: "Iron", amount: 3.2, unit: "mg", percentRDA: 18),
                .init(name: "Calcium", amount: 150, unit: "mg", percentRDA: 15)
            ],
            clarifications: [
                .init(
                    question: "What type of dressing was used?",
                    options: ["Olive Oil & Vinegar", "Ranch", "Caesar", "Balsamic Vinaigrette"],
                    clarificationType: "ingredient"
                )
            ]
        )
    }
    
    // MARK: - Error Types
    
    enum AnalysisError: LocalizedError {
        case imageCompressionFailed
        case invalidResponse
        case networkError(String)
        case quotaExceeded
        
        var errorDescription: String? {
            switch self {
            case .imageCompressionFailed:
                return "Failed to process the image"
            case .invalidResponse:
                return "Invalid response from AI service"
            case .networkError(let message):
                return "Network error: \(message)"
            case .quotaExceeded:
                return "Daily analysis limit reached"
            }
        }
    }
}

// MARK: - Extensions (copied from original)

extension NutritionGoal {
    var displayName: String {
        switch self {
        case .weightLoss:
            return "Weight Loss"
        case .muscleGain:
            return "Muscle Gain"
        case .maintainWeight:
            return "Maintain Weight"
        case .performanceFocus:
            return "Performance Focus"
        case .betterSleep:
            return "Better Sleep"
        case .overallWellbeing:
            return "Overall Wellbeing"
        case .athleticPerformance(let sport):
            return "Athletic Performance (\(sport))"
        }
    }
}

extension WindowPurpose {
    var displayName: String {
        switch self {
        case .preWorkout:
            return "Pre-Workout"
        case .postWorkout:
            return "Post-Workout"
        case .sustainedEnergy:
            return "Sustained Energy"
        case .recovery:
            return "Recovery"
        case .metabolicBoost:
            return "Metabolic Boost"
        case .sleepOptimization:
            return "Sleep Optimization"
        case .energyBoost:
            return "Energy Boost"
        case .focusBoost:
            return "Focus Boost"
        }
    }
}